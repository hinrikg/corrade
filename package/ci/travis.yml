# kate: indent-width 2;

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    - kubuntu-backports
    packages:
    - g++-4.7
    - cmake

matrix:
  include:
  - language: cpp
    os: linux
    compiler: gcc
    env: TARGET=desktop
  - language: cpp
    os: linux
    compiler: clang
    env:
    - TARGET=desktop-sanitizers
    - CMAKE_CXX_FLAGS="-fsanitize=address"
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        - llvm-toolchain-precise-3.8
        - kubuntu-backports
        packages:
        - clang-3.8
        - cmake
  - language: cpp
    os: osx
    compiler: clang
    env: TARGET=desktop
  - language: cpp
    os: osx
    env: TARGET=ios-simulator
  - language: cpp
    os: osx
    osx_image: xcode7.3
    env: TARGET=emscripten
  - language: android
    os: linux
    env: TARGET=android
    android:
      components:
      - build-tools-19.0.0
      - android-19
      - sys-img-armeabi-v7a-android-19

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/00ec7a9066bb0fec98f3
    on_success: change
    on_failure: always
    on_start: never

# If I don't put this blurb here, the OSX image crashes deep inside RVM while
# executing gem install xcpretty. I don't know why and, from what I guess, I
# don't even want to know, so I just keep this meaningless piece of random
# commands here, have another drink and move on with my life.
cache:
  directories:
  - $HOME/lets-summon-the-black-demons-to-stop-travis-from-crashing

install:
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "desktop" ]; then source ~/virtualenv/python2.7/bin/activate && pip install --upgrade pip && pip install --user git+git@github.com:eddyxu/cpp-coveralls.git && export CMAKE_CXX_FLAGS="$CMAKE_CXX_FLAGS --coverage"; fi

- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ ! "$TARGET" == "desktop-sanitizers" ]; then export CXX=g++-4.7; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "desktop-sanitizers" ]; then export CXX=clang++-3.8; fi
# so the directory tests pass (and then some workaround for crazy filesystem issues)
- if [ "$TRAVIS_OS_NAME" == "linux" ] && ( [ "$TARGET" == "desktop" ] || [ "$TARGET" == "desktop-sanitizers" ] ); then mkdir -p ~/.config/autostart; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && ( [ "$TARGET" == "desktop" ] || [ "$TARGET" == "desktop-sanitizers" ] ); then mkdir -p ~/.local; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && ( [ "$TARGET" == "desktop" ] || [ "$TARGET" == "desktop-sanitizers" ] ); then export CMAKE_CXX_FLAGS="$CMAKE_CXX_FLAGS -DTRAVIS_CI_HAS_CRAZY_FILESYSTEM_ON_LINUX"; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "android" ]; then wget -nc http://dl.google.com/android/ndk/android-ndk-r10e-linux-x86_64.bin && chmod +x android-*.bin && ./android-*.bin -y | grep -v Extracting; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew update; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "ios-simulator" ]; then gem install xcpretty; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "emscripten" ]; then brew install emscripten && export LLVM=/usr/local/opt/emscripten/libexec/llvm/bin && emcc; fi

script:
- if [ "$TRAVIS_OS_NAME" == "linux" ] && ( [ "$TARGET" == "desktop" ] || [ "$TARGET" == "desktop-sanitizers" ] ); then ./package/ci/travis-desktop.sh; fi
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "android" ]; then ./package/ci/travis-android-arm.sh; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "desktop" ]; then ./package/ci/travis-desktop.sh; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "ios-simulator" ]; then ./package/ci/travis-ios-simulator.sh; fi
- if [ "$TRAVIS_OS_NAME" == "osx" ] && [ "$TARGET" == "emscripten" ]; then ./package/ci/travis-emscripten.sh; fi
# Travis somehow is not able to gather all output, try to force it using this
- sync

after_success:
- if [ "$TRAVIS_OS_NAME" == "linux" ] && [ "$TARGET" == "desktop" ]; then coveralls --gcov /usr/bin/gcov-4.7 -i src/ -E "(.*/(Test)/.*|.*/Utility/rc.cpp)" --gcov-options '\-lp' > /dev/null; fi
